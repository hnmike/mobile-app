/**
 * L·ªõp VnExpressParser ch·ªãu tr√°ch nhi·ªám ph√¢n t√≠ch (parse) n·ªôi dung HTML t·ª´ trang VnExpress
 * ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin v·ªÅ c√°c danh m·ª•c (categories) v√† b√†i b√°o (articles).
 * N√≥ s·ª≠ d·ª•ng th∆∞ vi·ªán Jsoup ƒë·ªÉ thao t√°c v·ªõi c√¢y DOM c·ªßa HTML.
 * L·ªõp n√†y c≈©ng bao g·ªìm m·ªôt b·ªô nh·ªõ cache ƒë∆°n gi·∫£n ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin b√†i vi·∫øt ƒë√£ ph√¢n t√≠ch.
 *
 * T√°c gi·∫£: Tran Quy Dinh
 * Ng√†y t·∫°o: [Ng√†y b·∫°n t·∫°o file, v√≠ d·ª•: 27/05/2024]
 * Ng∆∞·ªùi s·ª≠a ƒë·ªïi:
 */
package com.example.appdocbao.api;

import com.example.appdocbao.data.model.Article;
import com.example.appdocbao.data.model.Category;
import com.example.appdocbao.data.News;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.text.ParseException; // Th√™m import n√†y n·∫øu b·∫°n c√≥ √Ω ƒë·ªãnh s·ª≠ d·ª•ng SimpleDateFormat ·ªü ƒë√¢u ƒë√≥ m√† ch∆∞a import
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import android.util.Log;

public class VnExpressParser {

    public static final String BASE_URL = "https://vnexpress.net";
    private static final Map<String, String> CATEGORY_MAP = initCategoryMap();
    private static final Map<String, Article> articleCache = new ConcurrentHashMap<>();

    /**
     * Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt Map ch·ª©a √°nh x·∫° gi·ªØa ID danh m·ª•c (d·∫°ng slug) v√† t√™n danh m·ª•c ti·∫øng Vi·ªát.
     * @return Map ch·ª©a th√¥ng tin c√°c danh m·ª•c.
     */
    private static Map<String, String> initCategoryMap() {
        Map<String, String> map = new HashMap<>();
        map.put("thoi-su", "Th·ªùi s·ª±");
        map.put("the-gioi", "Th·∫ø gi·ªõi");
        map.put("kinh-doanh", "Kinh doanh");
        map.put("giai-tri", "Gi·∫£i tr√≠");
        map.put("the-thao", "Th·ªÉ thao");
        map.put("phap-luat", "Ph√°p lu·∫≠t");
        map.put("giao-duc", "Gi√°o d·ª•c");
        map.put("suc-khoe", "S·ª©c kh·ªèe");
        map.put("doi-song", "ƒê·ªùi s·ªëng");
        map.put("du-lich", "Du l·ªãch");
        map.put("khoa-hoc", "Khoa h·ªçc");
        map.put("so-hoa", "S·ªë h√≥a");
        map.put("xe", "Xe");
        map.put("y-kien", "√ù ki·∫øn");
        map.put("tam-su", "T√¢m s·ª±");
        return map;
    }

    /**
     * Ph√¢n t√≠ch v√† t·∫°o danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng Category t·ª´ CATEGORY_MAP.
     * M·ªói Category s·∫Ω c√≥ ID, t√™n, m√¥ t·∫£ v√† m·ªôt emoji ƒë·∫°i di·ªán.
     * @return Danh s√°ch c√°c Category.
     */
    public static List<Category> parseCategories() {
        List<Category> categories = new ArrayList<>();

        for (Map.Entry<String, String> entry : CATEGORY_MAP.entrySet()) {
            String categoryId = entry.getKey();
            String categoryName = entry.getValue();

            // T·∫°o √°nh x·∫° emoji cho c√°c danh m·ª•c
            String emoji = "üì∞"; // M·∫∑c ƒë·ªãnh
            // (C√°c ƒëi·ªÅu ki·ªán if-else ƒë·ªÉ g√°n emoji)
            if (categoryName.equals("Th·ªÉ thao")) emoji = "üèà";
            else if (categoryName.equals("Gi·∫£i tr√≠")) emoji = "üé¨";
            else if (categoryName.equals("Kinh doanh")) emoji = "üíº";
            else if (categoryName.equals("Du l·ªãch")) emoji = "üå¥";
            else if (categoryName.equals("C√¥ng ngh·ªá") || categoryName.equals("S·ªë h√≥a")) emoji = "üéÆ";
            else if (categoryName.equals("ƒê·ªùi s·ªëng")) emoji = "üåû";

            Category category = new Category(
                    categoryId,
                    categoryName,
                    "Tin t·ª©c " + categoryName.toLowerCase() + " m·ªõi nh·∫•t",
                    emoji
            );

            categories.add(category);
        }

        return categories;
    }

    /**
     * Ph√¢n t√≠ch n·ªôi dung HTML ƒë·ªÉ tr√≠ch xu·∫•t danh s√°ch c√°c b√†i b√°o thu·ªôc m·ªôt danh m·ª•c c·ª• th·ªÉ.
     * S·ª≠ d·ª•ng Jsoup ƒë·ªÉ t√¨m c√°c ph·∫ßn t·ª≠ HTML ch·ª©a th√¥ng tin b√†i b√°o.
     * C√≥ th·ª≠ c√°c CSS selector kh√°c nhau n·∫øu selector ch√≠nh kh√¥ng t√¨m th·∫•y b√†i b√°o.
     * @param html N·ªôi dung HTML c·∫ßn ph√¢n t√≠ch.
     * @param categoryId ID c·ªßa danh m·ª•c (d·∫°ng slug) ƒë·ªÉ li√™n k·∫øt v·ªõi c√°c b√†i b√°o.
     * @return Danh s√°ch c√°c Article ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch.
     */
    public static List<Article> parseArticlesByCategory(String html, String categoryId) {
        List<Article> articles = new ArrayList<>();

        try {
            if (html == null || html.isEmpty()) {
                Log.e("VnExpressParser", "Empty HTML content");
                return articles; // Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu HTML tr·ªëng
            }

            Document doc = Jsoup.parse(html); // Ph√¢n t√≠ch HTML th√†nh ƒë·ªëi t∆∞·ª£ng Document
            Log.d("VnExpressParser", "Parsed HTML document with title: " + doc.title());

            // Th·ª≠ selector ch√≠nh ƒë·ªÉ t√¨m c√°c ph·∫ßn t·ª≠ b√†i b√°o
            Elements articleElements = doc.select("article.item-news");
            Log.d("VnExpressParser", "Found " + articleElements.size() + " article elements with 'article.item-news'");

            // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ c√°c selector thay th·∫ø
            if (articleElements.isEmpty()) {
                articleElements = doc.select("article.item-news-common");
                Log.d("VnExpressParser", "Second attempt found " + articleElements.size() + " article elements with 'article.item-news-common'");

                if (articleElements.isEmpty()) {
                    articleElements = doc.select("article"); // Th·ª≠ selector chung h∆°n
                    Log.d("VnExpressParser", "Last attempt found " + articleElements.size() + " article elements with 'article'");
                }
            }

            // Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ b√†i b√°o t√¨m ƒë∆∞·ª£c v√† ph√¢n t√≠ch th√¥ng tin
            for (Element articleElement : articleElements) {
                try {
                    Article article = parseArticleElement(articleElement, categoryId); // G·ªçi h√†m ph√¢n t√≠ch chi ti·∫øt t·ª´ng b√†i
                    if (article != null) {
                        articles.add(article);
                        Log.d("VnExpressParser", "Added article: " + article.getTitle());
                    }
                } catch (Exception e) {
                    Log.e("VnExpressParser", "Error parsing individual article: " + e.getMessage(), e);
                }
            }
        } catch (Exception e) {
            Log.e("VnExpressParser", "Error parsing articles by category: " + e.getMessage(), e);
        }

        Log.d("VnExpressParser", "Returning " + articles.size() + " articles for category " + categoryId);
        return articles;
    }

    /**
     * Ph√¢n t√≠ch m·ªôt ph·∫ßn t·ª≠ HTML (Element) ƒë·∫°i di·ªán cho m·ªôt b√†i b√°o ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt.
     * @param articleElement Ph·∫ßn t·ª≠ HTML ch·ª©a th√¥ng tin b√†i b√°o.
     * @param categoryId ID c·ªßa danh m·ª•c (d·∫°ng slug) c·ªßa b√†i b√°o n√†y.
     * @return ƒê·ªëi t∆∞·ª£ng Article ch·ª©a th√¥ng tin ƒë√£ tr√≠ch xu·∫•t, ho·∫∑c null n·∫øu c√≥ l·ªói.
     */
    public static Article parseArticleElement(Element articleElement, String categoryId) {
        try {
            // Tr√≠ch xu·∫•t ti√™u ƒë·ªÅ v√† URL ngu·ªìn c·ªßa b√†i b√°o
            Element titleElement = articleElement.selectFirst("h3.title-news > a");
            if (titleElement == null) {
                Log.w("VnExpressParser", "Title element not found in article element.");
                return null; // Kh√¥ng t√¨m th·∫•y ti√™u ƒë·ªÅ, kh√¥ng th·ªÉ t·∫°o b√†i b√°o
            }

            String title = titleElement.text();
            String sourceUrl = titleElement.attr("href");
            // ƒê·∫£m b·∫£o URL ngu·ªìn l√† URL ƒë·∫ßy ƒë·ªß
            if (!sourceUrl.startsWith("http")) {
                sourceUrl = BASE_URL + sourceUrl;
            }

            // Tr√≠ch xu·∫•t URL h√¨nh ·∫£nh
            Element imageElement = articleElement.selectFirst("div.thumb-art > a > img");
            String imageUrl = "";
            if (imageElement != null) {
                imageUrl = imageElement.attr("data-src"); // ∆Øu ti√™n 'data-src' cho lazy loading
                if (imageUrl.isEmpty()) {
                    imageUrl = imageElement.attr("src"); // N·∫øu kh√¥ng c√≥ 'data-src', th·ª≠ 'src'
                }

                // S·ª≠a l·ªói URL h√¨nh ·∫£nh n·∫øu c·∫ßn (th√™m https:)
                if (!imageUrl.isEmpty() && !imageUrl.startsWith("http")) {
                    imageUrl = "https:" + imageUrl;
                }
                Log.d("VnExpressParser", "Image URL for article '" + title + "': " + imageUrl);
            } else {
                // Th·ª≠ selector thay th·∫ø cho h√¨nh ·∫£nh
                imageElement = articleElement.selectFirst("img.lazy");
                if (imageElement != null) {
                    imageUrl = imageElement.attr("data-src");
                    if (imageUrl.isEmpty()) {
                        imageUrl = imageElement.attr("src");
                    }
                    if (!imageUrl.isEmpty() && !imageUrl.startsWith("http")) {
                        imageUrl = "https:" + imageUrl;
                    }
                    Log.d("VnExpressParser", "Found image with alternative selector for '" + title + "': " + imageUrl);
                } else {
                    Log.w("VnExpressParser", "Image element not found for article: " + title);
                }
            }

            // Tr√≠ch xu·∫•t m√¥ t·∫£ ng·∫Øn/ƒëo·∫°n tr√≠ch n·ªôi dung
            Element descElement = articleElement.selectFirst("p.description");
            String content = descElement != null ? descElement.text() : ""; // L·∫•y text n·∫øu ph·∫ßn t·ª≠ t·ªìn t·∫°i, ng∆∞·ª£c l·∫°i l√† chu·ªói r·ªóng

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Article
            String id = UUID.randomUUID().toString(); // T·∫°o ID duy nh·∫•t cho b√†i b√°o
            String categoryName = CATEGORY_MAP.getOrDefault(categoryId, "Tin t·ª©c"); // L·∫•y t√™n danh m·ª•c, m·∫∑c ƒë·ªãnh l√† "Tin t·ª©c"

            return new Article(
                    id,
                    title,
                    content, // ƒê√¢y l√† m√¥ t·∫£ ng·∫Øn, kh√¥ng ph·∫£i n·ªôi dung ƒë·∫ßy ƒë·ªß
                    imageUrl,
                    sourceUrl,
                    "VnExpress", // T√™n ngu·ªìn b√°o
                    categoryId,
                    categoryName,
                    new Date() // Ng√†y xu·∫•t b·∫£n ƒë∆∞·ª£c g√°n l√† th·ªùi ƒëi·ªÉm hi·ªán t·∫°i khi parse
            );
        } catch (Exception e) {
            Log.e("VnExpressParser", "Error parsing article element: " + e.getMessage(), e);
            return null; // Tr·∫£ v·ªÅ null n·∫øu c√≥ l·ªói x·∫£y ra
        }
    }

    /**
     * Ph√¢n t√≠ch n·ªôi dung HTML c·ªßa trang chi ti·∫øt m·ªôt b√†i b√°o ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ƒë·∫ßy ƒë·ªß.
     * @param html N·ªôi dung HTML c·ªßa trang chi ti·∫øt b√†i b√°o.
     * @param categoryId ID c·ªßa danh m·ª•c (d·∫°ng slug) m√† b√†i b√°o n√†y c√≥ th·ªÉ thu·ªôc v·ªÅ.
     * @return ƒê·ªëi t∆∞·ª£ng Article ch·ª©a th√¥ng tin chi ti·∫øt, ho·∫∑c null n·∫øu c√≥ l·ªói.
     */
    public static Article parseArticleDetail(String html, String categoryId) {
        try {
            Document doc = Jsoup.parse(html);

            // Tr√≠ch xu·∫•t ti√™u ƒë·ªÅ chi ti·∫øt
            Element titleElement = doc.selectFirst("h1.title-detail");
            if (titleElement == null) {
                Log.w("VnExpressParser", "Detail title element not found.");
                return null;
            }
            String title = titleElement.text();

            // Tr√≠ch xu·∫•t h√¨nh ·∫£nh ch√≠nh c·ªßa b√†i b√°o
            Element imageElement = doc.selectFirst("div.fig-picture > picture > img");
            String imageUrl = "";
            if (imageElement != null) {
                imageUrl = imageElement.attr("data-src");
                if (imageUrl.isEmpty()) {
                    imageUrl = imageElement.attr("src");
                }
                if (!imageUrl.isEmpty() && !imageUrl.startsWith("http")) {
                    imageUrl = "https:" + imageUrl;
                }
                Log.d("VnExpressParser", "Detail image URL: " + imageUrl);
            } else {
                // Th·ª≠ selector thay th·∫ø cho h√¨nh ·∫£nh chi ti·∫øt
                imageElement = doc.selectFirst("img.lazy"); // Th∆∞·ªùng d√πng cho lazy loading
                if (imageElement != null) {
                    imageUrl = imageElement.attr("data-src");
                    if (imageUrl.isEmpty()) {
                        imageUrl = imageElement.attr("src");
                    }
                    if (!imageUrl.isEmpty() && !imageUrl.startsWith("http")) {
                        imageUrl = "https:" + imageUrl;
                    }
                    Log.d("VnExpressParser", "Found detail image with alternative selector: " + imageUrl);
                } else {
                    Log.w("VnExpressParser", "Detail image element not found for article: " + title);
                }
            }

            // Tr√≠ch xu·∫•t n·ªôi dung ƒë·∫ßy ƒë·ªß c·ªßa b√†i b√°o
            StringBuilder contentBuilder = new StringBuilder();
            Elements contentElements = doc.select("article.fck_detail > p.Normal"); // Selector cho c√°c ƒëo·∫°n vƒÉn b·∫£n
            if (contentElements.isEmpty()){
                // Th·ª≠ m·ªôt selector kh√°c n·∫øu kh√¥ng t√¨m th·∫•y n·ªôi dung
                contentElements = doc.select("article.fck_detail p"); // L·∫•y t·∫•t c·∫£ c√°c th·∫ª <p> trong <article class="fck_detail">
                Log.d("VnExpressParser", "Trying alternative content selector, found: " + contentElements.size());
            }

            for (Element p : contentElements) {
                contentBuilder.append(p.text()).append("\n\n"); // N·ªëi vƒÉn b·∫£n t·ª´ m·ªói ƒëo·∫°n, th√™m d√≤ng m·ªõi
            }
            String content = contentBuilder.toString().trim(); // N·ªôi dung ƒë·∫ßy ƒë·ªß

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Article
            String id = UUID.randomUUID().toString();
            String categoryName = CATEGORY_MAP.getOrDefault(categoryId, "Tin t·ª©c");

            return new Article(
                    id,
                    title,
                    content, // N·ªôi dung ƒë·∫ßy ƒë·ªß
                    imageUrl,
                    doc.location(), // URL c·ªßa trang chi ti·∫øt, l·∫•y tr·ª±c ti·∫øp t·ª´ Document
                    "VnExpress",
                    categoryId,
                    categoryName,
                    new Date() // Ng√†y xu·∫•t b·∫£n ƒë∆∞·ª£c g√°n l√† th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
            );
        } catch (Exception e) {
            Log.e("VnExpressParser", "Error parsing article detail: " + e.getMessage(), e);
            return null;
        }
    }

    /**
     * L·∫•y v√† ph√¢n t√≠ch c√°c b√†i b√°o m·ªõi nh·∫•t t·ª´ trang ch·ªß VnExpress.
     * Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b√†i b√°o l·∫•y v·ªÅ (m·∫∑c ƒë·ªãnh l√† 20).
     * @return Danh s√°ch c√°c Article m·ªõi nh·∫•t.
     */
    public static List<Article> fetchLatestArticles() {
        List<Article> articles = new ArrayList<>();

        try {
            // K·∫øt n·ªëi ƒë·∫øn trang ch·ªß VnExpress v√† l·∫•y n·ªôi dung HTML
            Document doc = Jsoup.connect(BASE_URL).get();

            Elements articleElements = doc.select("article.item-news"); // Selector cho c√°c b√†i b√°o tr√™n trang ch·ªß
            for (Element articleElement : articleElements) {
                // X√°c ƒë·ªãnh danh m·ª•c c·ªßa b√†i b√°o d·ª±a tr√™n link c·ªßa danh m·ª•c
                String categoryId = "thoi-su"; // M·∫∑c ƒë·ªãnh l√† "Th·ªùi s·ª±"
                Element categoryLink = articleElement.selectFirst("a.cat"); // Selector cho link danh m·ª•c
                if (categoryLink != null) {
                    String href = categoryLink.attr("href");
                    for (String catKey : CATEGORY_MAP.keySet()) {
                        if (href.contains("/" + catKey)) { // Ki·ªÉm tra xem href c√≥ ch·ª©a slug c·ªßa danh m·ª•c kh√¥ng
                            categoryId = catKey;
                            break;
                        }
                    }
                }

                Article article = parseArticleElement(articleElement, categoryId); // Ph√¢n t√≠ch t·ª´ng b√†i b√°o
                if (article != null) {
                    articles.add(article);
                }

                // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b√†i b√°o l·∫•y v·ªÅ
                if (articles.size() >= 20) {
                    break;
                }
            }
        } catch (IOException e) {
            Log.e("VnExpressParser", "Error fetching latest articles: " + e.getMessage(), e);
            // e.printStackTrace(); // C√≥ th·ªÉ h·ªØu √≠ch khi debug, nh∆∞ng Log.e th∆∞·ªùng ƒë·ªß cho s·∫£n ph·∫©m
        }

        return articles;
    }

    /**
     * Ph√¢n t√≠ch HTML ƒë·ªÉ l·∫•y danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng `News` (m·ªôt l·ªõp d·ªØ li·ªáu kh√°c).
     * Chuy·ªÉn ƒë·ªïi t·ª´ `Article` (ƒë√£ parse) sang `News`.
     * @param html N·ªôi dung HTML ƒë·ªÉ ph√¢n t√≠ch.
     * @param categoryId ID d·∫°ng s·ªë nguy√™n c·ªßa danh m·ª•c.
     * @return Danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng `News`.
     */
    public List<com.example.appdocbao.data.News> parseNews(String html, int categoryId) {
        List<com.example.appdocbao.data.News> newsList = new ArrayList<>();

        // Chuy·ªÉn ƒë·ªïi categoryId (int) sang categoryId d·∫°ng chu·ªói (slug)
        String categoryStringId = getCategoryIdFromInt(categoryId);
        // N·∫øu categoryId kh√¥ng h·ª£p l·ªá (v√† kh√¥ng ph·∫£i l√† tin n·ªïi b·∫≠t/trang ch·ªß) th√¨ tr·∫£ v·ªÅ danh s√°ch r·ªóng
        if (categoryStringId == null && categoryId != 0) { // categoryId 0 c√≥ th·ªÉ l√† trang ch·ªß/tin n·ªïi b·∫≠t
            Log.e("VnExpressParser", "Invalid category ID for parseNews: " + categoryId);
            return newsList;
        }

        List<Article> articles;
        // N·∫øu categoryId l√† 0 (v√≠ d·ª•: tin n·ªïi b·∫≠t), ph√¢n t√≠ch t·ª´ m·ªôt categoryId m·∫∑c ƒë·ªãnh ho·∫∑c trang ch·ªß
        if (categoryId == 0) {
            // "tin-tuc-24h" c√≥ th·ªÉ l√† m·ªôt slug ƒë·∫°i di·ªán cho trang ch·ªß ho·∫∑c tin t·ªïng h·ª£p
            articles = parseArticlesByCategory(html, "tin-tuc-24h");
        } else {
            articles = parseArticlesByCategory(html, categoryStringId);
        }

        // Chuy·ªÉn ƒë·ªïi t·ª´ danh s√°ch Article sang danh s√°ch News
        int newsIdCounter = categoryId * 1000 + 1; // T·∫°o ID ban ƒë·∫ßu cho News ƒë·ªÉ tr√°nh tr√πng l·∫∑p gi·ªØa c√°c danh m·ª•c
        for (Article article : articles) {
            // X√°c ƒë·ªãnh xem tin c√≥ ph·∫£i l√† tin n·ªïi b·∫≠t hay kh√¥ng (v√≠ d·ª•: 3 tin ƒë·∫ßu ti√™n)
            boolean isFeatured = (newsIdCounter % 1000) <= 3; // Ki·ªÉm tra 3 b√†i ƒë·∫ßu ti√™n d·ª±a tr√™n counter

            // ID n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u Article v√†o cache, c·∫ßn ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t v√† ·ªïn ƒë·ªãnh n·∫øu c√≥ th·ªÉ
            // Hi·ªán t·∫°i ƒëang d√πng newsIdCounter, c√≥ th·ªÉ c√¢n nh·∫Øc d√πng article.getId() n·∫øu n√≥ ·ªïn ƒë·ªãnh h∆°n
            String cacheKeyId = String.valueOf(newsIdCounter);
            articleCache.put(cacheKeyId, article); // L∆∞u Article v√†o cache

            com.example.appdocbao.data.News newsItem = new com.example.appdocbao.data.News(
                    newsIdCounter++, // TƒÉng newsIdCounter cho b√†i ti·∫øp theo
                    article.getTitle(),
                    article.getContent(), // L∆∞u √Ω: content n√†y t·ª´ parseArticleElement l√† m√¥ t·∫£ ng·∫Øn
                    article.getImageUrl(),
                    formatDate(article.getPublishedTime()), // ƒê·ªãnh d·∫°ng ng√†y xu·∫•t b·∫£n
                    categoryId, // ID danh m·ª•c d·∫°ng s·ªë nguy√™n
                    isFeatured
            );

            newsList.add(newsItem);

            // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin t·ª©c cho m·ªói danh m·ª•c (v√≠ d·ª•: 10 tin)
            if (newsList.size() >= 10) {
                break;
            }
        }
        Log.d("VnExpressParser", "Parsed " + newsList.size() + " news items for category int ID: " + categoryId);
        return newsList;
    }

    /**
     * Chuy·ªÉn ƒë·ªïi ID danh m·ª•c d·∫°ng s·ªë nguy√™n (int) sang ID danh m·ª•c d·∫°ng chu·ªói (slug).
     * @param categoryId ID danh m·ª•c d·∫°ng s·ªë nguy√™n.
     * @return ID danh m·ª•c d·∫°ng chu·ªói (slug), ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    private String getCategoryIdFromInt(int categoryId) {
        switch (categoryId) {
            case 1: return "thoi-su";
            case 2: return "the-gioi";
            case 3: return "kinh-doanh";
            case 4: return "giai-tri";
            case 5: return "the-thao";
            case 6: return "phap-luat";
            case 7: return "giao-duc";
            case 8: return "suc-khoe";
            case 9: return "doi-song";
            case 10: return "du-lich";
            case 11: return "khoa-hoc";
            case 12: return "so-hoa"; // "S·ªë h√≥a"
            case 13: return "xe";
            case 14: return "y-kien";
            case 15: return "tam-su";
            default:
                Log.w("VnExpressParser", "Unknown integer category ID: " + categoryId);
                return null; // Tr·∫£ v·ªÅ null cho ID kh√¥ng x√°c ƒë·ªãnh
        }
    }

    /**
     * ƒê·ªãnh d·∫°ng ƒë·ªëi t∆∞·ª£ng Date th√†nh m·ªôt chu·ªói theo m·∫´u "HH:mm - dd/MM/yyyy".
     * @param date ƒê·ªëi t∆∞·ª£ng Date c·∫ßn ƒë·ªãnh d·∫°ng.
     * @return Chu·ªói ng√†y ƒë√£ ƒë·ªãnh d·∫°ng, ho·∫∑c chu·ªói r·ªóng n·∫øu date l√† null.
     */
    private String formatDate(Date date) {
        if (date == null) {
            return ""; // Tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu kh√¥ng c√≥ ng√†y
        }
        // S·ª≠ d·ª•ng java.text.SimpleDateFormat ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("HH:mm - dd/MM/yyyy", java.util.Locale.getDefault());
        return sdf.format(date);
    }

    /**
     * L·∫•y m·ªôt ƒë·ªëi t∆∞·ª£ng Article t·ª´ b·ªô nh·ªõ cache d·ª±a tr√™n ID c·ªßa n√≥.
     * @param id ID c·ªßa b√†i b√°o c·∫ßn l·∫•y (th∆∞·ªùng l√† ID ƒë√£ d√πng khi ƒë∆∞a v√†o cache, v√≠ d·ª• t·ª´ newsIdCounter).
     * @return ƒê·ªëi t∆∞·ª£ng Article n·∫øu t√¨m th·∫•y trong cache, ng∆∞·ª£c l·∫°i l√† null.
     */
    public static Article getArticleFromCache(String id) {
        return articleCache.get(id);
    }

    /**
     * Th√™m ho·∫∑c c·∫≠p nh·∫≠t m·ªôt ƒë·ªëi t∆∞·ª£ng Article v√†o b·ªô nh·ªõ cache.
     * @param id ID ƒë·ªÉ l∆∞u tr·ªØ b√†i b√°o trong cache.
     * @param article ƒê·ªëi t∆∞·ª£ng Article c·∫ßn l∆∞u.
     */
    public static void putArticleInCache(String id, Article article) {
        if (id != null && article != null) {
            articleCache.put(id, article);
        } else {
            Log.w("VnExpressParser", "Attempted to put null id or article in cache.");
        }
    }
}